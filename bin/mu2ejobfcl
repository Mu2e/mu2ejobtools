#!/usr/bin/perl -w
#
# A.Gaponenko, 2023
#

use strict;
use warnings;
no warnings 'portable'; # otherwise complaints about exceeding 32-bit integers

use Getopt::Long;
use File::Basename;

use Mu2eFilename;
use Mu2eDSName;

use lib dirname($0) . '/../perllib/';
use mu2ejobtools;
use Mu2eInSpecs;
use Mu2eJobPars;

use Data::Dumper; # for debugging


my $sp = Mu2eInSpecs->new;
$sp->disable_protocol(proto_ifdh);

#================================================================
sub format_filenames($$) {
    my ($sp, $list) = @_;

    my @res;

    foreach my $i (@$list) {
        my $apn = $sp->abspathname($i);
        my $dsn = Mu2eFilename->parse($i)->dataset->dsname;
        my $proto = $sp->protocol($dsn);
        if($proto eq proto_file) {
            push @res, $apn;
        }
        elsif($proto eq proto_root) {

            # the substitution is documented here
            # https://mu2ewiki.fnal.gov/wiki/DataTransfer#Load_balancer_door
            $apn =~ s|^/pnfs/|xroot://fndcadoor.fnal.gov//pnfs/fnal.gov/usr/|
                or die "Error: root protocol requested"
                ." but a file pathname does not start with /pnfs: $apn\n";

            push @res, $apn;
        }
        else {
            die "Error: unknown protocol $proto\n";
        }
    }

    return @res;
}

#================================================================
sub usage() {
    my $self = basename($0);

    my $inspec_opts = $sp->help_opts(' 'x11);
    chomp $inspec_opts;

    my $inspec_help = $sp->help_explanation(' 'x11);
    chomp $inspec_help;

    return <<EOF
Usage:
        $self \\
           --parfile=cnf.tar \\
           --index=<uint> \\
$inspec_opts
           [-h|--help]

This script prints out fcl config for a job with the given index in
the set of jobs defined by the parfile.  If the job needs any inputs,
their location and access protocol must be specified using the
following options:

$inspec_help
           --help or -h   prints out this message and stops processing.
EOF
}

#================================================================
my %opt;

GetOptions(\%opt,
           'parfile=s',
           'index=i',
           $sp->option_defs(),
           'help',
    )
    or die "\nError processing command line options.\n";

if($opt{'help'}) {
    print usage();
    exit 0;
}

#================================================================
# Check the fundamentals

die "Error: --parfile is required\n" unless $opt{'parfile'};
my $pfname = $opt{'parfile'};
die "Error: $pfname is not a file\n" unless -f $pfname;
die "Error: file $pfname is not readable\n" unless -r $pfname;

die "Error: --index is required\n" unless defined $opt{'index'};
my $index = $opt{'index'};
die "Error: --index must be non-negative, got: $index\n" if $index < 0;

my $jp = Mu2eJobPars->new($pfname);

$sp->initialize([$jp->input_datasets()], \%opt);

#================================================================
# is the index in range?

if(my $njobs = $jp->njobs()) {
    die "Zero based index $index is too large for njobs = $njobs\n"
        unless $index < $njobs;
}

#================================================================
my $fb =
    "#----------------------------------------------------------------\n".
    "# Code added by mu2ejobfcl:\n";

#----------------------------------------------------------------
my $evid = $jp->job_event_settings($index);
my @evset = map { $_ . ': ' . $evid->{$_} } keys %$evid;
$fb .= join("\n", @evset) . "\n" if %$evid;

#----------------------------------------------------------------
my $inputs = $jp->job_inputs($index);
foreach my $k (keys  %$inputs) {
    my $v = $inputs->{$k}; # pay the price to avoid the fragile each(%hash)

    $fb .= "$k: [\n    "
        . join(",\n    ",
               doubleQuote(format_filenames($sp, $v)))
        . "\n]\n";

}

#----------------------------------------------------------------
my $outputs = $jp->job_outputs($index);
foreach my $k (keys  %$outputs) {
    my $outfile = $outputs->{$k};
    $fb .= "$k: ".  doubleQuote($outfile) . "\n";
}

#----------------------------------------------------------------
my $seed = $jp->job_seed($index);
if(%$seed) {
    my ($k, $v) = %$seed;
    $fb .= "$k: $v\n";
}

#----------------------------------------------------------------
$fb .=
    "# End code added by mu2ejobfcl:\n".
    "#----------------------------------------------------------------\n";

#================================================================
my $orig_fcl = $jp->get_tar_member(filename_fcl);
die "Error: could not extract '". filename_fcl ."' from '$pfname'\n"
    unless defined $orig_fcl;

print $orig_fcl;
print $fb;

#================================================================
exit(0);
