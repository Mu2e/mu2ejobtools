#!/usr/bin/perl -w
#
# A.Gaponenko, 2023
#

use strict;
use warnings;
use Getopt::Long;
use File::Basename;

use lib dirname($0) . '/../perllib/';
use Mu2eJobPars;

use Data::Dumper; # for debugging

#================================================================
sub usage() {
    my $self = basename($0);
    return <<EOF
Usage:
    $self [-h|--help] <query> cnf.tar

This script extracts and prints out information from the job parameter
file cnf.tar   The possible queries are

    --jobname  The name of the job set.

    --njobs  The number of jobs in the set, zero means unlimited.

    --input-datasets  List of all datasets used by the job set.

    --output-datasets  List of all datasets created by the job set.

    --output-files <dsname>[:listsize]
        List of output files belonging to the given dataset.  For
        unlimited job sets one must specify the desired number of
        files to printout by appending a colon and the number to the
        dataset name.  Such decoration is not allowed for finite job
        sets, for which all output files will be printed.

    --codesize  The size of the compressed code tarball, in bytes.
        This will print 0 if the job par file does not contain code.

    --extract-code  This prints nothing, but expands the embedded code
        tarball in the current directory.  This option does nothing if
        there is no embedded code.

    --setup  Prints the name of the setup file.  A recommended way to
        setup Offline environment for the jobs is the following
        sequence of two commands (note the backticks).  This will do
        the right thing whether the code is embedded or lives in
        CVMFS.

        \$ mu2ejobquery --extract-code cnf.tar
        \$ source \`mu2ejobquery --setup cnf.tar\`

EOF
}

#================================================================
my %opt;

GetOptions(\%opt,
           'jobname',
           'njobs',
           'input-datasets',
           'output-datasets',
           'output-files=s',
           'codesize',
           'extract-code',
           'setup',
           'help',
    )
    or die "\nError processing command line options.\n";

if($opt{'help'}) {
    print usage();
    exit 0;
}

die "Error: too many arguments: @ARGV\n"
       if(scalar(@ARGV) > 1);

die "Error: the cnf.tar agument is required.\n"
       if(scalar(@ARGV) < 1);

my $nopt = scalar(keys %opt);
die "What is the query?\n" unless $nopt;
die "Error: multiple queries\n" unless $nopt == 1;

my $pfname = $ARGV[0];

my $jp = Mu2eJobPars->new($pfname);

#================================================================
if( $opt{'jobname'} ) {
    print $jp->jobname(), "\n";
}

#================================================================
if( $opt{'njobs'} ) {
    my $nj = $jp->njobs();
    print "$nj\n";
}

#================================================================
if( $opt{'input-datasets'} ) {
    my @dss = $jp->input_datasets();
    print map { $_ . "\n" } @dss;
}

#================================================================
if( $opt{'output-datasets'} ) {
    my @dss = $jp->output_datasets();
    print map { $_ . "\n" } @dss;
}

#================================================================
if( my $spec = $opt{'output-files'} ) {
    my ($dsname, $listsize) = split(/:/, $spec);

    die "Error: please append list size specification to $dsname\n"
        unless defined $listsize or $jp->njobs();

    die "Error: --output-files list size specification"
        . " is not allowed for finite job sets\n"
        if defined $listsize and $jp->njobs();

    $listsize = $jp->njobs unless defined $listsize;

    die "Error: list size specification \"$listsize\" is not a number\n"
        unless $listsize =~ m/^\d+$/;

    die "Error: dataset $dsname is not produced by the job set\n"
        unless scalar grep { $_ eq $dsname } $jp->output_datasets;

    my $ds = Mu2eDSName->parse($dsname);

    for(my $i = 0; $i < $listsize; ++$i) {
        print $ds->file($jp->sequencer($i))->basename . "\n";
    }
}

#================================================================
if( $opt{'codesize'} ) {
    print $jp->codesize(), "\n";
}

#================================================================
if( $opt{'extract-code'} ) {
    $jp->extract_code();
}

#================================================================
if( $opt{'setup'} ) {
    print $jp->setup(), "\n";
}

#================================================================
exit(0);
