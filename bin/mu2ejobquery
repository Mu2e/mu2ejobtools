#!/usr/bin/perl -w
#
# A.Gaponenko, 2023
#

use Getopt::Long;
use File::Basename;
use JSON;
use Archive::Tar;
use English qw( -no_match_vars ) ; # Avoids regex performance penalty
use strict;
use warnings;

use lib dirname($0);
use mu2etools;

use Data::Dumper; # for debugging

#================================================================
sub usage() {
    my $self = basename($0);
    return <<EOF
Usage:
        $self [-h|--help] <query> cnf.tar

This script extracts and prints out information from the job parameter
file cnf.tar

The possible queries are

    --jobname  The name of the job set.

    --njobs    The number of jobs in the set, zero means unlimited.

    --setup    Print out shell commands to perform Mu2e software setup
               to run the job.  WARNING: if the job parameter file
               includes a code tarball, it will  be expanded in the
               current directory.  Cd to a suitable location before
               running the --setup query.   The intended use is

               \$ \`mu2ejobquery --setup cnf.tar\`

               note the backticks to execute the setup.
EOF
}

#================================================================
my %opt;

GetOptions(\%opt,
           'jobname',
           'njobs',
           'setup',
           'help',
    )
    or die "\nError processing command line options.\n";

if($opt{'help'}) {
    print usage();
    exit 0;
}

die "Error: too many arguments: @ARGV\n"
       if(scalar(@ARGV) > 1);

die "Error: the cnf.tar agument is required.\n"
       if(scalar(@ARGV) < 1);

my $nopt = scalar(keys %opt);
die "What is the query?\n" unless $nopt;
die "Error: multiple queries\n" unless $nopt == 1;

my $pfname = $ARGV[0];
my $jsstr = get_tar_member($pfname, filename_json)
   or die "Error: can not extract ". filename_json ." from $pfname.\n";

my $js = JSON->new->decode($jsstr);

#================================================================
if( $opt{'jobname'} ) {
    my $jobname = $js->{'jobname'}
       or die "Error: no jobname in $pfname\n";
    print $jobname, "\n";
}

#================================================================
if( $opt{'njobs'} ) {
    my $nj = get_njobs($js);
    print "$nj\n";
}

#================================================================
if( $opt{'setup'} ) {
    if(my $code = $js->{'code'}) {
        open(my $in, '-|',
             'tar', '--extract', '--to-stdout', "--file=$pfname", $code)
            or die "Error running tar on $pfname\n";

        open(my $out, '|-',
             'tar', '--extract', '--bzip2', "--file=-")
            or die "Error running code expansion tar\n";

        my $BUFSIZE = 64 * (2**20);
        my $buf;
        while(read($in, $buf, $BUFSIZE)) {
            print $out $buf
                or die "Error extracting the code: $!\n";
        }

        close($in) or die "Error closing input tar pipe: $!\n";
        close($out) or die "Error closing output tar pipe: $!\n";
    }

    my $sf = $js->{'setup'} or die "Error: no setup in JSON\n";
    print "source $sf\n";
}

#================================================================
exit(0);
