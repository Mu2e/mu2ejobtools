#!/usr/bin/perl -w
#
# A.Gaponenko, 2023
#

use strict;
use warnings;
use Getopt::Long;
use File::Basename;
use JSON;

use lib dirname($0) . '/../perllib/';
use Mu2eJobPars;
use Mu2eInSpecs;

use Data::Dumper; # for debugging

#================================================================
sub usage() {
    my $self = basename($0);
    return <<EOF
Usage:
        $self [-h|--help] \\
              --jobpar cnf.tar \\
              --index uint \\
             [--inspec spec.json] \\
             [--stagedir /abs/path] \\
             {--inputs|--outputs|--prestage-spec|--cmdline}

This script provides information about input and outuput files of a
job defined by the combination of the --jobpar and --index parameters.
It has 4 mutually exclusive modes of operation:

    --inputs   prints out basenames of job input files

    --outputs  prints out basenames of output files

    --prestage-spec  prints out a "prestage specification"
        suitable for pre-staging input files with ifdh.

    --cmdline prints out command line switches for mu2ejobfcl that
        specify input protocols and file locations,

The parameter --inspec is required for the --prestage-spec
and --cmdline modes.  If any files are to be pre-staged,
then --stagedir is also required.

    --inspec A json file, normally passed from the grid submission
        script, which specifies protocol and location for each of
        the input datasets.

    --stagedir  an absolute path to a local directory
        for pre-staging input files

There is also the

     --help (or -h) options to print out this text and stop.
EOF
}

#================================================================
my %opt;

GetOptions(\%opt,
           'jobpar=s',
           'index=i',
           'inspec=s',
           'stagedir=s',
           'inputs',
           'outputs',
           'prestage-spec',
           'cmdline',
           'help',
    )
    or die "\nError processing command line options.\n";

if($opt{'help'}) {
    print usage();
    exit 0;
}

my $ismode = sub { my ($k) = @_; return  scalar grep { $_ eq $k }
                   qw/inputs outputs prestage-spec cmdline/;  };

my @modes = grep { $ismode->($_) } keys %opt;

die "Error: the running modes are mutually exclusive, got: @modes\n"
    unless scalar(@modes) < 2;

die "Error: a running mode must be specified\n"
    unless scalar(@modes) == 1;

my ($mode) = @modes;

my $pfname = $opt{'jobpar'};
die "Error: --jobpar is required" unless defined $pfname;

my $index = $opt{'index'};
die "Error: --index is required\n" unless defined $index;

my $jp = Mu2eJobPars->new($pfname);

#================================================================
if($mode eq 'inputs') {

    my @files = sort map { @{$_} } values %{$jp->job_inputs($index)};

    print join("\n", @files), "\n";
}

#================================================================
if($mode eq 'outputs') {

    my @files = sort values %{$jp->job_outputs($index)};

    print join("\n", @files), "\n";
}

#================================================================
if($mode eq 'prestage-spec') {

    my $stagedir = $opt{'stagedir'};
    die "Error: --stagedir is required for --prestage-spec\n"
        unless defined $stagedir;

    my $specfile = $opt{'inspec'};
    die "Error: --inspec is required for --prestage-spec\n"
        unless defined $specfile;

    my $jsstr = do{local(@ARGV,$/)=$specfile; <> };
    my $specmap = from_json($jsstr);

    my @files = sort map { @{$_} } values %{$jp->job_inputs($index)};

    foreach my $f (@files) {
        my $fn = Mu2eFilename->parse($f);
        my $dsstr = $fn->dataset->dsname;
        my $dss = $specmap->{$dsstr};
        die "Error: dataset $dsstr is missing in $specfile\n" unless defined $dss;
        if($dss->[0] eq proto_ifdh) { # need to pre-stage
            my $lfn = "$stagedir/$f";
            my $rfn = $fn->abspathname($dss->[1]);
            print $rfn, " ", $lfn, "\n";
        }
    }
}

#================================================================
if($mode eq 'cmdline') {
    ...
}

#================================================================
exit(0);
